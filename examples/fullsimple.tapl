/*** FIXES, LETRECS ***/
let x = succ 0 
	in let y = succ x
		in y;

evenodd = fix (lambda eo: {even: Nat -> Bool, odd: Nat -> Bool}.
	{even = lambda x: Nat. if iszero x then true else eo.odd (pred x),
	 odd = lambda x: Nat. if iszero x then false else eo.even (pred x)});
		
evenodd.even (succ 0);
evenodd.even (succ (succ 0));

// letrec is just let with fix!
letrec even:Nat -> Bool = 
	lambda x: Nat.
		if iszero x then true
		else if iszero (pred x) then false
		else even (pred (pred x))
in
	even (succ (succ (succ 0)));


/*** RECORDS AND VARIANTS ***/
// Records
PhysicalAddr = {firstlast:String, addr:String};
// type is not saved during compution of ascribe term!
{firstlast= "lambdamix", addr="Russia"} as PhysicalAddr;
VirtualAddr = {name:String, email:String};

// Variants 
Addr = <physical:PhysicalAddr, virtual:VirtualAddr>;
getName = lambda a:Addr. case a of
	<physical=x> ==> x.firstlast | <virtual=y> ==> y.name;

"123";

pa = {firstlast= "lambdamix", addr="Russia"} as PhysicalAddr;
va = {name = "ilya", email = "ilya@ru"} as VirtualAddr;
addr1 = <physical=pa> as Addr;
addr2 = <virtual=va> as Addr;

getName addr1;
getName addr2;

lambda _: Unit. 5;
\_: Unit. 5;

let x = 5 in 7;
let _ = 5 in 7;

ff = lambda ieio : {iseven: Nat -> Bool, isodd: Nat -> Bool}.
    {
        iseven = lambda x : Nat.
                    if iszero x then true
                    else ieio.isodd (pred x),
        isodd  = lambda x : Nat.
                    if iszero x then false
                    else ieio.iseven (pred x)
    };

r = fix ff;
